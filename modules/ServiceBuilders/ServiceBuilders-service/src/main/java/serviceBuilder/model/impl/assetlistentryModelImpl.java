/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package serviceBuilder.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import serviceBuilder.model.assetlistentry;
import serviceBuilder.model.assetlistentryModel;
import serviceBuilder.model.assetlistentrySoap;

/**
 * The base model implementation for the assetlistentry service. Represents a row in the &quot;LT_assetlistentry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>assetlistentryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link assetlistentryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see assetlistentryImpl
 * @generated
 */
@JSON(strict = true)
public class assetlistentryModelImpl
	extends BaseModelImpl<assetlistentry> implements assetlistentryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a assetlistentry model instance should use the <code>assetlistentry</code> interface instead.
	 */
	public static final String TABLE_NAME = "LT_assetlistentry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"mvccversion", Types.INTEGER},
		{"ctcollectionid", Types.INTEGER}, {"assetlistentryid", Types.INTEGER},
		{"groupid", Types.INTEGER}, {"companyid", Types.INTEGER},
		{"userid", Types.INTEGER}, {"username", Types.VARCHAR},
		{"createdate", Types.TIMESTAMP}, {"modifieddate", Types.TIMESTAMP},
		{"assetlistentrykey", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"type_", Types.INTEGER}, {"assetentrysubtype", Types.VARCHAR},
		{"assetentrytype", Types.VARCHAR}, {"lastpublishdate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mvccversion", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ctcollectionid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("assetlistentryid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("companyid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifieddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("assetlistentrykey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("assetentrysubtype", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetentrytype", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastpublishdate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LT_assetlistentry (uuid_ VARCHAR(75) null,mvccversion INTEGER,ctcollectionid INTEGER,assetlistentryid INTEGER not null primary key,groupid INTEGER,companyid INTEGER,userid INTEGER,username VARCHAR(75) null,createdate DATE null,modifieddate DATE null,assetlistentrykey VARCHAR(75) null,title VARCHAR(75) null,type_ INTEGER,assetentrysubtype VARCHAR(75) null,assetentrytype VARCHAR(75) null,lastpublishdate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LT_assetlistentry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY assetlistentry.assetlistentryid ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LT_assetlistentry.assetlistentryid ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ASSETLISTENTRYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static assetlistentry toModel(assetlistentrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		assetlistentry model = new assetlistentryImpl();

		model.setUuid(soapModel.getUuid());
		model.setMvccversion(soapModel.getMvccversion());
		model.setCtcollectionid(soapModel.getCtcollectionid());
		model.setAssetlistentryid(soapModel.getAssetlistentryid());
		model.setGroupid(soapModel.getGroupid());
		model.setCompanyid(soapModel.getCompanyid());
		model.setUserid(soapModel.getUserid());
		model.setUsername(soapModel.getUsername());
		model.setCreatedate(soapModel.getCreatedate());
		model.setModifieddate(soapModel.getModifieddate());
		model.setAssetlistentrykey(soapModel.getAssetlistentrykey());
		model.setTitle(soapModel.getTitle());
		model.setType_(soapModel.getType_());
		model.setAssetentrysubtype(soapModel.getAssetentrysubtype());
		model.setAssetentrytype(soapModel.getAssetentrytype());
		model.setLastpublishdate(soapModel.getLastpublishdate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<assetlistentry> toModels(
		assetlistentrySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<assetlistentry> models = new ArrayList<assetlistentry>(
			soapModels.length);

		for (assetlistentrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public assetlistentryModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _assetlistentryid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setAssetlistentryid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _assetlistentryid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return assetlistentry.class;
	}

	@Override
	public String getModelClassName() {
		return assetlistentry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<assetlistentry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<assetlistentry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<assetlistentry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((assetlistentry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<assetlistentry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<assetlistentry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(assetlistentry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<assetlistentry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<assetlistentry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, assetlistentry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			assetlistentry.class.getClassLoader(), assetlistentry.class,
			ModelWrapper.class);

		try {
			Constructor<assetlistentry> constructor =
				(Constructor<assetlistentry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<assetlistentry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<assetlistentry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<assetlistentry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<assetlistentry, Object>>();
		Map<String, BiConsumer<assetlistentry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<assetlistentry, ?>>();

		attributeGetterFunctions.put("uuid", assetlistentry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<assetlistentry, String>)assetlistentry::setUuid);
		attributeGetterFunctions.put(
			"mvccversion", assetlistentry::getMvccversion);
		attributeSetterBiConsumers.put(
			"mvccversion",
			(BiConsumer<assetlistentry, Integer>)
				assetlistentry::setMvccversion);
		attributeGetterFunctions.put(
			"ctcollectionid", assetlistentry::getCtcollectionid);
		attributeSetterBiConsumers.put(
			"ctcollectionid",
			(BiConsumer<assetlistentry, Integer>)
				assetlistentry::setCtcollectionid);
		attributeGetterFunctions.put(
			"assetlistentryid", assetlistentry::getAssetlistentryid);
		attributeSetterBiConsumers.put(
			"assetlistentryid",
			(BiConsumer<assetlistentry, Integer>)
				assetlistentry::setAssetlistentryid);
		attributeGetterFunctions.put("groupid", assetlistentry::getGroupid);
		attributeSetterBiConsumers.put(
			"groupid",
			(BiConsumer<assetlistentry, Integer>)assetlistentry::setGroupid);
		attributeGetterFunctions.put("companyid", assetlistentry::getCompanyid);
		attributeSetterBiConsumers.put(
			"companyid",
			(BiConsumer<assetlistentry, Integer>)assetlistentry::setCompanyid);
		attributeGetterFunctions.put("userid", assetlistentry::getUserid);
		attributeSetterBiConsumers.put(
			"userid",
			(BiConsumer<assetlistentry, Integer>)assetlistentry::setUserid);
		attributeGetterFunctions.put("username", assetlistentry::getUsername);
		attributeSetterBiConsumers.put(
			"username",
			(BiConsumer<assetlistentry, String>)assetlistentry::setUsername);
		attributeGetterFunctions.put(
			"createdate", assetlistentry::getCreatedate);
		attributeSetterBiConsumers.put(
			"createdate",
			(BiConsumer<assetlistentry, Date>)assetlistentry::setCreatedate);
		attributeGetterFunctions.put(
			"modifieddate", assetlistentry::getModifieddate);
		attributeSetterBiConsumers.put(
			"modifieddate",
			(BiConsumer<assetlistentry, Date>)assetlistentry::setModifieddate);
		attributeGetterFunctions.put(
			"assetlistentrykey", assetlistentry::getAssetlistentrykey);
		attributeSetterBiConsumers.put(
			"assetlistentrykey",
			(BiConsumer<assetlistentry, String>)
				assetlistentry::setAssetlistentrykey);
		attributeGetterFunctions.put("title", assetlistentry::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<assetlistentry, String>)assetlistentry::setTitle);
		attributeGetterFunctions.put("type_", assetlistentry::getType_);
		attributeSetterBiConsumers.put(
			"type_",
			(BiConsumer<assetlistentry, Integer>)assetlistentry::setType_);
		attributeGetterFunctions.put(
			"assetentrysubtype", assetlistentry::getAssetentrysubtype);
		attributeSetterBiConsumers.put(
			"assetentrysubtype",
			(BiConsumer<assetlistentry, String>)
				assetlistentry::setAssetentrysubtype);
		attributeGetterFunctions.put(
			"assetentrytype", assetlistentry::getAssetentrytype);
		attributeSetterBiConsumers.put(
			"assetentrytype",
			(BiConsumer<assetlistentry, String>)
				assetlistentry::setAssetentrytype);
		attributeGetterFunctions.put(
			"lastpublishdate", assetlistentry::getLastpublishdate);
		attributeSetterBiConsumers.put(
			"lastpublishdate",
			(BiConsumer<assetlistentry, Date>)
				assetlistentry::setLastpublishdate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public int getMvccversion() {
		return _mvccversion;
	}

	@Override
	public void setMvccversion(int mvccversion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccversion = mvccversion;
	}

	@JSON
	@Override
	public int getCtcollectionid() {
		return _ctcollectionid;
	}

	@Override
	public void setCtcollectionid(int ctcollectionid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ctcollectionid = ctcollectionid;
	}

	@JSON
	@Override
	public int getAssetlistentryid() {
		return _assetlistentryid;
	}

	@Override
	public void setAssetlistentryid(int assetlistentryid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetlistentryid = assetlistentryid;
	}

	@JSON
	@Override
	public int getGroupid() {
		return _groupid;
	}

	@Override
	public void setGroupid(int groupid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupid = groupid;
	}

	@JSON
	@Override
	public int getCompanyid() {
		return _companyid;
	}

	@Override
	public void setCompanyid(int companyid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyid = companyid;
	}

	@JSON
	@Override
	public int getUserid() {
		return _userid;
	}

	@Override
	public void setUserid(int userid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userid = userid;
	}

	@JSON
	@Override
	public String getUsername() {
		if (_username == null) {
			return "";
		}
		else {
			return _username;
		}
	}

	@Override
	public void setUsername(String username) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_username = username;
	}

	@JSON
	@Override
	public Date getCreatedate() {
		return _createdate;
	}

	@Override
	public void setCreatedate(Date createdate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdate = createdate;
	}

	@JSON
	@Override
	public Date getModifieddate() {
		return _modifieddate;
	}

	@Override
	public void setModifieddate(Date modifieddate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifieddate = modifieddate;
	}

	@JSON
	@Override
	public String getAssetlistentrykey() {
		if (_assetlistentrykey == null) {
			return "";
		}
		else {
			return _assetlistentrykey;
		}
	}

	@Override
	public void setAssetlistentrykey(String assetlistentrykey) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetlistentrykey = assetlistentrykey;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public int getType_() {
		return _type_;
	}

	@Override
	public void setType_(int type_) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type_ = type_;
	}

	@JSON
	@Override
	public String getAssetentrysubtype() {
		if (_assetentrysubtype == null) {
			return "";
		}
		else {
			return _assetentrysubtype;
		}
	}

	@Override
	public void setAssetentrysubtype(String assetentrysubtype) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetentrysubtype = assetentrysubtype;
	}

	@JSON
	@Override
	public String getAssetentrytype() {
		if (_assetentrytype == null) {
			return "";
		}
		else {
			return _assetentrytype;
		}
	}

	@Override
	public void setAssetentrytype(String assetentrytype) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetentrytype = assetentrytype;
	}

	@JSON
	@Override
	public Date getLastpublishdate() {
		return _lastpublishdate;
	}

	@Override
	public void setLastpublishdate(Date lastpublishdate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastpublishdate = lastpublishdate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public assetlistentry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, assetlistentry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		assetlistentryImpl assetlistentryImpl = new assetlistentryImpl();

		assetlistentryImpl.setUuid(getUuid());
		assetlistentryImpl.setMvccversion(getMvccversion());
		assetlistentryImpl.setCtcollectionid(getCtcollectionid());
		assetlistentryImpl.setAssetlistentryid(getAssetlistentryid());
		assetlistentryImpl.setGroupid(getGroupid());
		assetlistentryImpl.setCompanyid(getCompanyid());
		assetlistentryImpl.setUserid(getUserid());
		assetlistentryImpl.setUsername(getUsername());
		assetlistentryImpl.setCreatedate(getCreatedate());
		assetlistentryImpl.setModifieddate(getModifieddate());
		assetlistentryImpl.setAssetlistentrykey(getAssetlistentrykey());
		assetlistentryImpl.setTitle(getTitle());
		assetlistentryImpl.setType_(getType_());
		assetlistentryImpl.setAssetentrysubtype(getAssetentrysubtype());
		assetlistentryImpl.setAssetentrytype(getAssetentrytype());
		assetlistentryImpl.setLastpublishdate(getLastpublishdate());

		assetlistentryImpl.resetOriginalValues();

		return assetlistentryImpl;
	}

	@Override
	public int compareTo(assetlistentry assetlistentry) {
		int primaryKey = assetlistentry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof assetlistentry)) {
			return false;
		}

		assetlistentry assetlistentry = (assetlistentry)object;

		int primaryKey = assetlistentry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<assetlistentry> toCacheModel() {
		assetlistentryCacheModel assetlistentryCacheModel =
			new assetlistentryCacheModel();

		assetlistentryCacheModel.uuid = getUuid();

		String uuid = assetlistentryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			assetlistentryCacheModel.uuid = null;
		}

		assetlistentryCacheModel.mvccversion = getMvccversion();

		assetlistentryCacheModel.ctcollectionid = getCtcollectionid();

		assetlistentryCacheModel.assetlistentryid = getAssetlistentryid();

		assetlistentryCacheModel.groupid = getGroupid();

		assetlistentryCacheModel.companyid = getCompanyid();

		assetlistentryCacheModel.userid = getUserid();

		assetlistentryCacheModel.username = getUsername();

		String username = assetlistentryCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			assetlistentryCacheModel.username = null;
		}

		Date createdate = getCreatedate();

		if (createdate != null) {
			assetlistentryCacheModel.createdate = createdate.getTime();
		}
		else {
			assetlistentryCacheModel.createdate = Long.MIN_VALUE;
		}

		Date modifieddate = getModifieddate();

		if (modifieddate != null) {
			assetlistentryCacheModel.modifieddate = modifieddate.getTime();
		}
		else {
			assetlistentryCacheModel.modifieddate = Long.MIN_VALUE;
		}

		assetlistentryCacheModel.assetlistentrykey = getAssetlistentrykey();

		String assetlistentrykey = assetlistentryCacheModel.assetlistentrykey;

		if ((assetlistentrykey != null) && (assetlistentrykey.length() == 0)) {
			assetlistentryCacheModel.assetlistentrykey = null;
		}

		assetlistentryCacheModel.title = getTitle();

		String title = assetlistentryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			assetlistentryCacheModel.title = null;
		}

		assetlistentryCacheModel.type_ = getType_();

		assetlistentryCacheModel.assetentrysubtype = getAssetentrysubtype();

		String assetentrysubtype = assetlistentryCacheModel.assetentrysubtype;

		if ((assetentrysubtype != null) && (assetentrysubtype.length() == 0)) {
			assetlistentryCacheModel.assetentrysubtype = null;
		}

		assetlistentryCacheModel.assetentrytype = getAssetentrytype();

		String assetentrytype = assetlistentryCacheModel.assetentrytype;

		if ((assetentrytype != null) && (assetentrytype.length() == 0)) {
			assetlistentryCacheModel.assetentrytype = null;
		}

		Date lastpublishdate = getLastpublishdate();

		if (lastpublishdate != null) {
			assetlistentryCacheModel.lastpublishdate =
				lastpublishdate.getTime();
		}
		else {
			assetlistentryCacheModel.lastpublishdate = Long.MIN_VALUE;
		}

		return assetlistentryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<assetlistentry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<assetlistentry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<assetlistentry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((assetlistentry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<assetlistentry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<assetlistentry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<assetlistentry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((assetlistentry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, assetlistentry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private int _mvccversion;
	private int _ctcollectionid;
	private int _assetlistentryid;
	private int _groupid;
	private int _companyid;
	private int _userid;
	private String _username;
	private Date _createdate;
	private Date _modifieddate;
	private String _assetlistentrykey;
	private String _title;
	private int _type_;
	private String _assetentrysubtype;
	private String _assetentrytype;
	private Date _lastpublishdate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<assetlistentry, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((assetlistentry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("mvccversion", _mvccversion);
		_columnOriginalValues.put("ctcollectionid", _ctcollectionid);
		_columnOriginalValues.put("assetlistentryid", _assetlistentryid);
		_columnOriginalValues.put("groupid", _groupid);
		_columnOriginalValues.put("companyid", _companyid);
		_columnOriginalValues.put("userid", _userid);
		_columnOriginalValues.put("username", _username);
		_columnOriginalValues.put("createdate", _createdate);
		_columnOriginalValues.put("modifieddate", _modifieddate);
		_columnOriginalValues.put("assetlistentrykey", _assetlistentrykey);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("type_", _type_);
		_columnOriginalValues.put("assetentrysubtype", _assetentrysubtype);
		_columnOriginalValues.put("assetentrytype", _assetentrytype);
		_columnOriginalValues.put("lastpublishdate", _lastpublishdate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("mvccversion", 2L);

		columnBitmasks.put("ctcollectionid", 4L);

		columnBitmasks.put("assetlistentryid", 8L);

		columnBitmasks.put("groupid", 16L);

		columnBitmasks.put("companyid", 32L);

		columnBitmasks.put("userid", 64L);

		columnBitmasks.put("username", 128L);

		columnBitmasks.put("createdate", 256L);

		columnBitmasks.put("modifieddate", 512L);

		columnBitmasks.put("assetlistentrykey", 1024L);

		columnBitmasks.put("title", 2048L);

		columnBitmasks.put("type_", 4096L);

		columnBitmasks.put("assetentrysubtype", 8192L);

		columnBitmasks.put("assetentrytype", 16384L);

		columnBitmasks.put("lastpublishdate", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private assetlistentry _escapedModel;

}